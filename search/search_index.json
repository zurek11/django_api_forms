{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django API Forms \u00b6 Django Forms approach in validation of request payload (especially for content type like JSON or MessagePack ) without HTML front-end. Motivation \u00b6 Main idea was to create a simple and declarative way to specify format of expecting request with ability to validate them. Firstly I tried to use Django Forms to validate my API request (I use pure Django in my APIs). I have encountered a problem with nesting my requests without huge boilerplate. Also, the whole HTML thing was pretty useless in my RESTful APIs. I wanted something to: define my requests as object ( Form ) pass the request to my defined object ( form = Form.create_from_request(request) ) validate my request form.is_valid() extract data form.clean_data property I wanted to keep: friendly declarative Django syntax ( DeclarativeFieldsMetaclass is beautiful) Django Validators ValidationError So I decided to create simple Python package to cover all my expectations. Community examples \u00b6 django_api_forms_modelchoicefield_example : Example usage of the ModelChoiceField with Django API Forms created by pawl Tests \u00b6 # install all dependencies poetry install # run the tests poetry run pytest","title":"Home"},{"location":"#django-api-forms","text":"Django Forms approach in validation of request payload (especially for content type like JSON or MessagePack ) without HTML front-end.","title":"Django API Forms"},{"location":"#motivation","text":"Main idea was to create a simple and declarative way to specify format of expecting request with ability to validate them. Firstly I tried to use Django Forms to validate my API request (I use pure Django in my APIs). I have encountered a problem with nesting my requests without huge boilerplate. Also, the whole HTML thing was pretty useless in my RESTful APIs. I wanted something to: define my requests as object ( Form ) pass the request to my defined object ( form = Form.create_from_request(request) ) validate my request form.is_valid() extract data form.clean_data property I wanted to keep: friendly declarative Django syntax ( DeclarativeFieldsMetaclass is beautiful) Django Validators ValidationError So I decided to create simple Python package to cover all my expectations.","title":"Motivation"},{"location":"#community-examples","text":"django_api_forms_modelchoicefield_example : Example usage of the ModelChoiceField with Django API Forms created by pawl","title":"Community examples"},{"location":"#tests","text":"# install all dependencies poetry install # run the tests poetry run pytest","title":"Tests"},{"location":"example/","text":"Example \u00b6 JSON request \u00b6 { \"title\" : \"Unknown Pleasures\" , \"type\" : \"vinyl\" , \"artist\" : { \"name\" : \"Joy Division\" , \"genres\" : [ \"rock\" , \"punk\" ], \"members\" : 4 }, \"year\" : 1979 , \"songs\" : [ { \"title\" : \"Disorder\" , \"duration\" : \"3:29\" }, { \"title\" : \"Day of the Lords\" , \"duration\" : \"4:48\" , \"metadata\" : { \"_section\" : { \"type\" : \"ID3v2\" , \"offset\" : 0 , \"byteLength\" : 2048 }, \"header\" : { \"majorVersion\" : 3 , \"minorRevision\" : 0 , \"flagsOctet\" : 0 , \"unsynchronisationFlag\" : false , \"extendedHeaderFlag\" : false , \"experimentalIndicatorFlag\" : false , \"size\" : 2038 } } } ], \"metadata\" : { \"created_at\" : \"2019-10-21T18:57:03+0100\" , \"updated_at\" : \"2019-10-21T18:57:03+0100\" } } Python implementation \u00b6 from enum import Enum from django.core.exceptions import ValidationError from django.forms import fields from django_api_forms import FieldList , FormField , FormFieldList , DictionaryField , EnumField , AnyField , Form class AlbumType ( Enum ): CD = 'cd' VINYL = 'vinyl' class ArtistForm ( Form ): name = fields . CharField ( required = True , max_length = 100 ) genres = FieldList ( field = fields . CharField ( max_length = 30 )) members = fields . IntegerField () class SongForm ( Form ): title = fields . CharField ( required = True , max_length = 100 ) duration = fields . DurationField ( required = False ) metadata = AnyField ( required = False ) class AlbumForm ( Form ): title = fields . CharField ( max_length = 100 ) year = fields . IntegerField () artist = FormField ( form = ArtistForm ) songs = FormFieldList ( form = SongForm ) type = EnumField ( enum = AlbumType , required = True ) metadata = DictionaryField ( fields . DateTimeField ()) def clean_year ( self ): if self . cleaned_data [ 'year' ] == 1992 : raise ValidationError ( \"Year 1992 is forbidden!\" , 'forbidden-value' ) return self . cleaned_data [ 'year' ] def clean ( self ): if ( self . cleaned_data [ 'year' ] == 1998 ) and ( self . cleaned_data [ 'artist' ][ 'name' ] == \"Nirvana\" ): raise ValidationError ( \"Sounds like a bullshit\" , code = 'time-traveling' ) return self . cleaned_data \"\"\" Django view example \"\"\" def create_album ( request ): form = AlbumForm . create_from_request ( request ) if not form . is_valid (): # Process your validation error print ( form . errors ) # Cleaned valid payload payload = form . cleaned_data print ( payload )","title":"Example"},{"location":"example/#example","text":"","title":"Example"},{"location":"example/#json-request","text":"{ \"title\" : \"Unknown Pleasures\" , \"type\" : \"vinyl\" , \"artist\" : { \"name\" : \"Joy Division\" , \"genres\" : [ \"rock\" , \"punk\" ], \"members\" : 4 }, \"year\" : 1979 , \"songs\" : [ { \"title\" : \"Disorder\" , \"duration\" : \"3:29\" }, { \"title\" : \"Day of the Lords\" , \"duration\" : \"4:48\" , \"metadata\" : { \"_section\" : { \"type\" : \"ID3v2\" , \"offset\" : 0 , \"byteLength\" : 2048 }, \"header\" : { \"majorVersion\" : 3 , \"minorRevision\" : 0 , \"flagsOctet\" : 0 , \"unsynchronisationFlag\" : false , \"extendedHeaderFlag\" : false , \"experimentalIndicatorFlag\" : false , \"size\" : 2038 } } } ], \"metadata\" : { \"created_at\" : \"2019-10-21T18:57:03+0100\" , \"updated_at\" : \"2019-10-21T18:57:03+0100\" } }","title":"JSON request"},{"location":"example/#python-implementation","text":"from enum import Enum from django.core.exceptions import ValidationError from django.forms import fields from django_api_forms import FieldList , FormField , FormFieldList , DictionaryField , EnumField , AnyField , Form class AlbumType ( Enum ): CD = 'cd' VINYL = 'vinyl' class ArtistForm ( Form ): name = fields . CharField ( required = True , max_length = 100 ) genres = FieldList ( field = fields . CharField ( max_length = 30 )) members = fields . IntegerField () class SongForm ( Form ): title = fields . CharField ( required = True , max_length = 100 ) duration = fields . DurationField ( required = False ) metadata = AnyField ( required = False ) class AlbumForm ( Form ): title = fields . CharField ( max_length = 100 ) year = fields . IntegerField () artist = FormField ( form = ArtistForm ) songs = FormFieldList ( form = SongForm ) type = EnumField ( enum = AlbumType , required = True ) metadata = DictionaryField ( fields . DateTimeField ()) def clean_year ( self ): if self . cleaned_data [ 'year' ] == 1992 : raise ValidationError ( \"Year 1992 is forbidden!\" , 'forbidden-value' ) return self . cleaned_data [ 'year' ] def clean ( self ): if ( self . cleaned_data [ 'year' ] == 1998 ) and ( self . cleaned_data [ 'artist' ][ 'name' ] == \"Nirvana\" ): raise ValidationError ( \"Sounds like a bullshit\" , code = 'time-traveling' ) return self . cleaned_data \"\"\" Django view example \"\"\" def create_album ( request ): form = AlbumForm . create_from_request ( request ) if not form . is_valid (): # Process your validation error print ( form . errors ) # Cleaned valid payload payload = form . cleaned_data print ( payload )","title":"Python implementation"},{"location":"fields/","text":"Fields \u00b6 Even if we tried to use maximum of native Django field, we had to override some of them to be more fit for RESTful applications. Also we introduced new ones, to cover extra functionality like nested requests. In this section we will explain our intentions and describe their usage. To sum up: You can use Django Form Fields : CharField ChoiceField TypedChoiceField DateField DateTimeField DecimalField DurationField EmailField FilePathField FloatField IntegerField GenericIPAddressField MultipleChoiceField TypedMultipleChoiceField RegexField SlugField TimeField URLField UUIDField ModelChoiceField ModelMultipleChoiceField You can use Django Validators . Fields which are not in the list above were not been tested or been replaced with our customized implementation (or it just doesn't make sense use them in RESTful APIs). BooleanField \u00b6 Normalizes to: A Python True or False value (or None if it's not required) Django BooleanField checks only for False ( false , 0 ) values and everything else is suppose to be True . In my point of view this kind of behaviour it's little bit weird, so we decided to check explicitly for True and False values. If field is required ValidationError is raised or value is normalized as None . Checked values: True : True 'True' 'true' 1 '1' False : False 'False' 'false' 0 '0' Note: We would like to change this behaviour to support only boolean values and rely on deserializers. FieldList \u00b6 This field is used to parse list of primitive values (like strings or numbers). If you want to parse list of object, check FormFieldList . Normalizes to: A Python list Error message keys: not_field , not_list Required arguments: field : Instance of a form field representing children JSON example { \"numbers\" : [ 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 ] } Python representation from django_api_forms import Form , FieldList from django.forms import fields class FibonacciForm ( Form ): numbers = FieldList ( field = fields . IntegerField ()) FormField \u00b6 Field used for embedded objects represented as another API form. Normalizes to: A Python dictionary Required arguments: form : Type of a nested form JSON example { \"title\" : \"Unknown Pleasures\" , \"year\" : 1979 , \"artist\" : { \"name\" : \"Joy Division\" , \"genres\" : [ \"rock\" , \"punk\" ], \"members\" : 4 } } Python representation from django_api_forms import Form , FormField , FieldList from django.forms import fields class ArtistForm ( Form ): name = fields . CharField ( required = True , max_length = 100 ) genres = FieldList ( field = fields . CharField ( max_length = 30 )) members = fields . IntegerField () class AlbumForm ( Form ): title = fields . CharField ( max_length = 100 ) year = fields . IntegerField () artist = FormField ( form = ArtistForm ) FormFieldList \u00b6 Field used for embedded objects represented as another API form. Normalizes to: A Python list of dictionaries Error message keys: not_list Required arguments: form : Type of a nested form JSON example { \"title\" : \"Rock For People\" , \"artists\" : [ { \"name\" : \"Joy Division\" , \"genres\" : [ \"rock\" , \"punk\" ], \"members\" : 4 } ] } Python representation from django_api_forms import Form , FormFieldList , FieldList from django.forms import fields class ArtistForm ( Form ): name = fields . CharField ( required = True , max_length = 100 ) genres = FieldList ( field = fields . CharField ( max_length = 30 )) members = fields . IntegerField () class FestivalForm ( Form ): title = fields . CharField ( max_length = 100 ) year = fields . IntegerField () artists = FormFieldList ( form = ArtistForm ) EnumField \u00b6 This field depends on django-enum-choices (because normalized value is Enum object, not a string). Normalizes to: A Python Enum object Error message keys: not_enum , invalid Required arguments: enum : Enum class JSON example { \"title\" : \"Rock For People\" , \"type\" : \"vinyl\" } Python representation from enum import Enum from django_api_forms import Form , EnumField from django.forms import fields class AlbumType ( Enum ): CD = 'cd' VINYL = 'vinyl' class AlbumForm ( Form ): title = fields . CharField ( required = True , max_length = 100 ) type = EnumField ( enum = AlbumType ) DictionaryField \u00b6 AnyField \u00b6 FileField \u00b6 ImageField \u00b6","title":"Fields"},{"location":"fields/#fields","text":"Even if we tried to use maximum of native Django field, we had to override some of them to be more fit for RESTful applications. Also we introduced new ones, to cover extra functionality like nested requests. In this section we will explain our intentions and describe their usage. To sum up: You can use Django Form Fields : CharField ChoiceField TypedChoiceField DateField DateTimeField DecimalField DurationField EmailField FilePathField FloatField IntegerField GenericIPAddressField MultipleChoiceField TypedMultipleChoiceField RegexField SlugField TimeField URLField UUIDField ModelChoiceField ModelMultipleChoiceField You can use Django Validators . Fields which are not in the list above were not been tested or been replaced with our customized implementation (or it just doesn't make sense use them in RESTful APIs).","title":"Fields"},{"location":"fields/#booleanfield","text":"Normalizes to: A Python True or False value (or None if it's not required) Django BooleanField checks only for False ( false , 0 ) values and everything else is suppose to be True . In my point of view this kind of behaviour it's little bit weird, so we decided to check explicitly for True and False values. If field is required ValidationError is raised or value is normalized as None . Checked values: True : True 'True' 'true' 1 '1' False : False 'False' 'false' 0 '0' Note: We would like to change this behaviour to support only boolean values and rely on deserializers.","title":"BooleanField"},{"location":"fields/#fieldlist","text":"This field is used to parse list of primitive values (like strings or numbers). If you want to parse list of object, check FormFieldList . Normalizes to: A Python list Error message keys: not_field , not_list Required arguments: field : Instance of a form field representing children JSON example { \"numbers\" : [ 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 ] } Python representation from django_api_forms import Form , FieldList from django.forms import fields class FibonacciForm ( Form ): numbers = FieldList ( field = fields . IntegerField ())","title":"FieldList"},{"location":"fields/#formfield","text":"Field used for embedded objects represented as another API form. Normalizes to: A Python dictionary Required arguments: form : Type of a nested form JSON example { \"title\" : \"Unknown Pleasures\" , \"year\" : 1979 , \"artist\" : { \"name\" : \"Joy Division\" , \"genres\" : [ \"rock\" , \"punk\" ], \"members\" : 4 } } Python representation from django_api_forms import Form , FormField , FieldList from django.forms import fields class ArtistForm ( Form ): name = fields . CharField ( required = True , max_length = 100 ) genres = FieldList ( field = fields . CharField ( max_length = 30 )) members = fields . IntegerField () class AlbumForm ( Form ): title = fields . CharField ( max_length = 100 ) year = fields . IntegerField () artist = FormField ( form = ArtistForm )","title":"FormField"},{"location":"fields/#formfieldlist","text":"Field used for embedded objects represented as another API form. Normalizes to: A Python list of dictionaries Error message keys: not_list Required arguments: form : Type of a nested form JSON example { \"title\" : \"Rock For People\" , \"artists\" : [ { \"name\" : \"Joy Division\" , \"genres\" : [ \"rock\" , \"punk\" ], \"members\" : 4 } ] } Python representation from django_api_forms import Form , FormFieldList , FieldList from django.forms import fields class ArtistForm ( Form ): name = fields . CharField ( required = True , max_length = 100 ) genres = FieldList ( field = fields . CharField ( max_length = 30 )) members = fields . IntegerField () class FestivalForm ( Form ): title = fields . CharField ( max_length = 100 ) year = fields . IntegerField () artists = FormFieldList ( form = ArtistForm )","title":"FormFieldList"},{"location":"fields/#enumfield","text":"This field depends on django-enum-choices (because normalized value is Enum object, not a string). Normalizes to: A Python Enum object Error message keys: not_enum , invalid Required arguments: enum : Enum class JSON example { \"title\" : \"Rock For People\" , \"type\" : \"vinyl\" } Python representation from enum import Enum from django_api_forms import Form , EnumField from django.forms import fields class AlbumType ( Enum ): CD = 'cd' VINYL = 'vinyl' class AlbumForm ( Form ): title = fields . CharField ( required = True , max_length = 100 ) type = EnumField ( enum = AlbumType )","title":"EnumField"},{"location":"fields/#dictionaryfield","text":"","title":"DictionaryField"},{"location":"fields/#anyfield","text":"","title":"AnyField"},{"location":"fields/#filefield","text":"","title":"FileField"},{"location":"fields/#imagefield","text":"","title":"ImageField"},{"location":"install/","text":"Installation \u00b6 Library is published on PyPi index as django-api-forms . You can add it to your project using your favourite package manager. Few examples: # Using pip pip install django-api-forms # Using poetry peotry add django-api-forms # Using pipenv pipenv install django-api-forms # Using setup.py python setup.py install Extra functionality \u00b6 If you want to use some extra functionality, you have to install additional dependencies. msgpack \u00b6 Library checks for application/x-msgpack HTTP content type. To work it properly you have to install msgpack . We support extras_require , so you can do it by executing pip install django-api-forms[msgpack] while installing django-api-forms or individually by pip install msgpack inside your environment. Pillow \u00b6 Library provides FileField and ImageField , which are pretty similar to Django native implementation . There fields require Pillow to be installed inside of your environment. pip install django-api-forms[Pillow] pip install Pillow Fun fact \u00b6 You can install all extra dependencies using one call pip install django-api-forms[Pillow,msgpack] .","title":"Installation"},{"location":"install/#installation","text":"Library is published on PyPi index as django-api-forms . You can add it to your project using your favourite package manager. Few examples: # Using pip pip install django-api-forms # Using poetry peotry add django-api-forms # Using pipenv pipenv install django-api-forms # Using setup.py python setup.py install","title":"Installation"},{"location":"install/#extra-functionality","text":"If you want to use some extra functionality, you have to install additional dependencies.","title":"Extra functionality"},{"location":"install/#msgpack","text":"Library checks for application/x-msgpack HTTP content type. To work it properly you have to install msgpack . We support extras_require , so you can do it by executing pip install django-api-forms[msgpack] while installing django-api-forms or individually by pip install msgpack inside your environment.","title":"msgpack"},{"location":"install/#pillow","text":"Library provides FileField and ImageField , which are pretty similar to Django native implementation . There fields require Pillow to be installed inside of your environment. pip install django-api-forms[Pillow] pip install Pillow","title":"Pillow"},{"location":"install/#fun-fact","text":"You can install all extra dependencies using one call pip install django-api-forms[Pillow,msgpack] .","title":"Fun fact"},{"location":"validation/","text":"Validation \u00b6 Workflow \u00b6","title":"Validation"},{"location":"validation/#validation","text":"","title":"Validation"},{"location":"validation/#workflow","text":"","title":"Workflow"}]}